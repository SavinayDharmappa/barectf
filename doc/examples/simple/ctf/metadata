/* CTF 1.8 */

typealias integer {size = 8; align = 8;}			:= uint8_t;
typealias integer {size = 16; align = 16;}			:= uint16_t;
typealias integer {size = 32; align = 32;}			:= uint32_t;
typealias integer {size = 64; align = 64;}			:= uint64_t;
typealias integer {size = 8; align = 8; signed = true;}		:= int8_t;
typealias integer {size = 16; align = 16; signed = true;}	:= int16_t;
typealias integer {size = 32; align = 32; signed = true;}	:= int32_t;
typealias integer {size = 64; align = 64; signed = true;}	:= int64_t;

typealias floating_point {
	exp_dig = 8;
	mant_dig = 24;
	align = 32;
} := float;

typealias floating_point {
	exp_dig = 11;
	mant_dig = 53;
	align = 64;
} := double;

trace {
	major = 1;
	minor = 8;
	byte_order = le;

	packet.header := struct {
		uint32_t magic;
		uint32_t stream_id;
	};
};

env {
	domain = "bare";
	tracer_name = "barectf";
	tracer_major = 0;
	tracer_minor = 1;
	tracer_patchlevel = 0;
};

clock {
	name = my_clock;
	freq = 1000000000;
	offset = 0;
};

typealias integer {
	size = 64;
	map = clock.my_clock.value;
} := my_clock_int_t;

stream {
	id = 0;

	packet.context := struct {
		my_clock_int_t timestamp_begin;
		my_clock_int_t timestamp_end;
		uint64_t packet_size;
		uint64_t content_size;
		uint32_t events_discarded;
	};

	event.header := struct {
		uint32_t id;
		my_clock_int_t timestamp;
	};
};

/* an event with a simple 32-bit unsigned integer field */
event {
	name = "simple_uint32";
	id = 0;
	stream_id = 0;

	fields := struct {
		uint32_t _value;
	};
};

/* an event with a simple 16-bit signed integer field */
event {
	name = "simple_int16";
	id = 1;
	stream_id = 0;

	fields := struct {
		int16_t _value;
	};
};

/*
 * An event with a simple IEEE 754 (see type alias above) single-precision
 * floating point number.
 */
event {
	name = "simple_float";
	id = 2;
	stream_id = 0;

	fields := struct {
		float _value;
	};
};

/* an event with a simple NULL-terminated string field */
event {
	name = "simple_string";
	id = 3;
	stream_id = 0;

	fields := struct {
		string _value;
	};
};

/* custom enumeration, of which the key is a 8-bit unsigned integer */
typealias enum : uint8_t {
	NEW,		/* 0 */
	TERMINATED,	/* 1 */
	READY,		/* 2 */
	RUNNING,	/* 3 */
	WAITING,	/* 4 */
} := state_t;

/* an event with a simple enumeration (see type alias above) field */
event {
	name = "simple_enum";
	id = 4;
	stream_id = 0;

	fields := struct {
		state_t _state;
	};
};

/* an event with a few fields */
event {
	name = "a_few_fields";
	id = 5;
	stream_id = 0;

	fields := struct {
		int32_t _int32;
		uint16_t _uint16;
		double _double;
		string _string;
		state_t _state;
	};
};

/* an event with bit-packed integer fields */
event {
	name = "bit_packed_integers";
	id = 6;
	stream_id = 0;

	fields := struct {
		integer {size = 1;} _uint1;
		integer {size = 1; signed = true;} _int1;
		integer {size = 2;} _uint2;
		integer {size = 3; signed = true;} _int3;
		integer {size = 4;} _uint4;
		integer {size = 5; signed = true;} _int5;
		integer {size = 6;} _uint6;
		integer {size = 7; signed = true;} _int7;
		integer {size = 8; align = 1;} _uint8;
	};
};
